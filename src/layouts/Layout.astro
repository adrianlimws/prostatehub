---
import "../styles/global.css";
import TextResizer from '../components/vue/TextResizer.vue';
import ChatAssistant from '../components/astro/ChatBot.astro';
const { title } = Astro.props;
---

<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <!-- Inline script runs immediately to prevent flash of unstyled content -->
    <script is:inline>
      (function() {
        const savedSize = localStorage.getItem('preferredFontSize') || 'normal';
        document.documentElement.classList.add(`font-size-${savedSize}`);
      })();
    </script>
  </head>
  <body class="min-h-screen">
      <!-- Screen reader announcement element for accessibility -->
      <div id="text-size-announcement" class="sr-announcer" aria-live="polite" aria-atomic="true"></div>
      
      <!-- TextResizer as an Astro Island with client:load directive -->
      <TextResizer client:load />
      
      <!-- No-JS fallback (hidden when JS is enabled) -->
      <noscript>
        <style>
          .font-size-control-fallback { display: none; }
          @media (max-width: 768px) {
            .font-size-control-fallback {
              display: block;
              position: fixed;
              bottom: 16px;
              right: 16px;
              background: white;
              padding: 0.5rem;
              border-radius: 0.5rem;
              box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
              border: 1px solid #e5e7eb;
            }
          }
        </style>
        <div class="font-size-control-fallback">
          <span style="font-size: 0.75rem; color: #6b7280;">For text sizing, please enable JavaScript</span>
        </div>
      </noscript>
      
      <slot />
      <ChatAssistant />

      <!-- Animation with Tailwind CSS -->
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const animatedElements = document.querySelectorAll('[data-animation]');
          
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const animation = entry.target.dataset.animation;
                
                entry.target.classList.remove('opacity-0', '-translate-y-10', 'translate-y-10', 
                                             'translate-x-10', '-translate-x-10', 'scale-95');
                
                entry.target.classList.add('opacity-100', 'translate-y-0', 'translate-x-0', 'scale-100');
                
                observer.unobserve(entry.target);
              }
            });
          }, {
            threshold: 0.1, // Trigger when 10% of the element is visible
            rootMargin: '0px'
          });
          
          animatedElements.forEach(element => {
            const animation = element.dataset.animation;
            const delay = element.dataset.delay || '0';
            
            element.style.transitionDelay = `${delay}ms`;
            
            element.classList.add('transform', 'transition', 'duration-700', 'opacity-0');
            
            switch(animation) {
              case 'fade-up':
                element.classList.add('translate-y-10');
                break;
              case 'fade-down':
                element.classList.add('-translate-y-10');
                break;
              case 'fade-left':
                element.classList.add('-translate-x-10');
                break;
              case 'fade-right':
                element.classList.add('translate-x-10');
                break;
              case 'zoom-in':
                element.classList.add('scale-95');
                break;
              case 'fade':
              default:
                // opacity change for basic fade
                break;
            }
            
            observer.observe(element);
          });
        });
      </script>

      <!-- Mouse tracking helper-->
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const mouseTracker = document.createElement('div');
          mouseTracker.className = 'mouse-tracker';
          document.body.appendChild(mouseTracker);
          
          let isMoving = false;
          let timeoutId = null;
          
          document.addEventListener('mousemove', (e) => {
            mouseTracker.style.left = `${e.clientX}px`;
            mouseTracker.style.top = `${e.clientY}px`;
            
            mouseTracker.style.opacity = '0.7';
            
            isMoving = true;
            mouseTracker.classList.remove('idle');
            
            // Clear existing timeout
            if (timeoutId) {
              clearTimeout(timeoutId);
            }
            
            // Set timeout to mark as idle if no movement
            timeoutId = setTimeout(() => {
              isMoving = false;
              mouseTracker.classList.add('idle');
            }, 500);
          });
          
          // Hide tracker when mouse leaves window
          document.addEventListener('mouseleave', () => {
            mouseTracker.style.opacity = '0';
          });
          
          // Show tracker when mouse enters window
          document.addEventListener('mouseenter', () => {
            mouseTracker.style.opacity = '0.7';
          });
          
          // Special effect when clicking
          document.addEventListener('mousedown', () => {
            mouseTracker.style.transform = 'translate(-50%, -50%) scale(0.8)';
            mouseTracker.style.opacity = '0.9';
          });
          
          document.addEventListener('mouseup', () => {
            mouseTracker.style.transform = 'translate(-50%, -50%) scale(1)';
            mouseTracker.style.opacity = '0.7';
          });
        });
      </script>
  </body>
</html>